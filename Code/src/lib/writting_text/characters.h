#ifndef CHARACTERS_H__
#define CHARACTERS_H__

#include <stdint.h>
#include <stdbool.h>


static uint8_t char7 [][7] = {
	{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, //' '
	{0x08, 0x14, 0x22, 0x41, 0x7f, 0x41, 0x41}, //'A'
	{0x3c, 0x22, 0x22, 0x3c, 0x22, 0x22, 0x3c}, //'B'
	{0x1c, 0x22, 0x40, 0x40, 0x40, 0x22, 0x1c}, //'C'
	{0x38, 0x24, 0x22, 0x22, 0x22, 0x24, 0x38}, //'D'
	{0x3e, 0x20, 0x20, 0x3c, 0x20, 0x20, 0x3e}, //'E'
	{0x3e, 0x20, 0x20, 0x3c, 0x20, 0x20, 0x20}, //'F'
	{0x1e, 0x20, 0x20, 0x2c, 0x22, 0x22, 0x1e}, //'G'
	{0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22}, //'H'
	{0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c}, //'I'
	{0x1c, 0x04, 0x04, 0x04, 0x04, 0x14, 0x08}, //'J'
	{0x22, 0x24, 0x28, 0x30, 0x28, 0x24, 0x22}, //'K'
	{0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c}, //'L'
	{0x41, 0x63, 0x55, 0x49, 0x41, 0x41, 0x41}, //'M'
	{0x22, 0x32, 0x22, 0x2a, 0x22, 0x26, 0x22}, //'N'
	{0x1c, 0x22, 0x41, 0x41, 0x41, 0x22, 0x1c}, //'O'
	{0x38, 0x24, 0x24, 0x38, 0x20, 0x20, 0x20}, //'P'
	{0x1c, 0x22, 0x41, 0x41, 0x45, 0x22, 0x1d}, //'Q'
	{0x38, 0x24, 0x24, 0x38, 0x28, 0x24, 0x24}, //'R'
	{0x1e, 0x20, 0x20, 0x1c, 0x0a, 0x02, 0x3c}, //'S'
	{0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08}, //'T'
	{0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c}, //'U'
	{0x22, 0x22, 0x22, 0x14, 0x14, 0x14, 0x08}, //'V'
	{0x41, 0x41, 0x41, 0x49, 0x55, 0x63, 0x41}, //'W'
	{0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22}, //'X'
	{0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08}, //'Y'
	{0x3e, 0x02, 0x04, 0x08, 0x10, 0x20, 0x3e}, //'Z'
	{0x22, 0x77, 0x7f, 0x7f, 0x3e, 0x1c, 0x08}  //28 - coração
};

const static uint16_t char16 [27][16] = {
	{0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, //' '
	{0x0000, 0x07c0, 0x0fe0, 0x0c60, 0x0c60, 0x1830, 0x1830, 0x1830, 0x1ff0, 0x1ff0, 0x1830, 0x1830, 0x1830, 0x1830, 0x1830, 0x0000}, //'A'		ok
	{0x0000, 0x1fc0, 0x1fe0, 0x1830, 0x1830, 0x1830, 0x1830, 0x1fe0, 0x1fe0, 0x1830, 0x1830, 0x1830, 0x1830, 0x1fe0, 0x1fc0, 0x0000}, //'B'		ok
	{0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, //'C'
	{0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, //'D'
	{0x0000, 0x0ff0, 0x1ff0, 0x1800, 0x1800, 0x1800, 0x1800, 0x1f80, 0x1f80, 0x1800, 0x1800, 0x1800, 0x1800, 0x1ff0, 0x0ff0, 0x0000}, //'E'		ok
	{0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, //'F'
	{0x0000, 0x0fe0, 0x1ff0, 0x1830, 0x1800, 0x1800, 0x1800, 0x1800, 0x19e0, 0x19f0, 0x1830, 0x1830, 0x1830, 0x1ff0, 0x0fe0, 0x0000}, //'G'		ok
	{0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, //'H'
	{0x0000, 0x0ff0, 0x0ff0, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0ff0, 0x0ff0, 0x0000}, //'I'		ok
	{0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, //'J'
	{0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, //'K'
	{0x0000, 0x1800, 0x1800, 0x1800, 0x1800, 0x1800, 0x1800, 0x1800, 0x1800, 0x1800, 0x1800, 0x1800, 0x1800, 0x1ff0, 0x1ff0, 0x0000}, //'L'		ok
	{0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, //'M'
	{0x0000, 0x1830, 0x1c30, 0x1c30, 0x1e30, 0x1e30, 0x1b30, 0x1b30, 0x19b0, 0x19b0, 0x18f0, 0x18f0, 0x1870, 0x1870, 0x1830, 0x0000}, //'N'		ok
	{0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, //'O'
	{0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, //'P'
	{0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, //'Q'
	{0x0000, 0x1fc0, 0x1fe0, 0x1830, 0x1830, 0x1830, 0x1830, 0x1830, 0x1fe0, 0x1fc0, 0x18c0, 0x1860, 0x1860, 0x1830, 0x1830, 0x0000}, //'R'		ok
	{0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, //'S'
	{0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, //'T'
	{0x0000, 0x1830, 0x1830, 0x1830, 0x1830, 0x1830, 0x1830, 0x1830, 0x1830, 0x1830, 0x1830, 0x1830, 0x1830, 0x1ff0, 0x0fe0, 0x0000}, //'U'		ok
	{0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, //'V'
	{0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, //'W'
	{0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, //'X'
	{0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, //'Y'
	{0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}  //'Z'
};
/*

function convertToBinNotationArray(uint16Data){
    let ret = "{";
    for(let val of uint16Data){ 
        ret += ("0b"+("0000000000000000"+val.toString(2)).substr(-16))+",\n"
    }
	ret+="},"
    console.log(ret);
}

function convertToHexNotationArray(uint16Data){
    let ret = "{";
    for(let val of uint16Data){ 
        ret += ("0x"+("0000"+val.toString(16)).substr(-4))+", ";
    }
    ret = ret.substring(0, ret.length-2) + "},";
    console.log(ret);
}
function uint8ToHexNotationArray(uint8Data){
    let ret = "{";
    for(let val of uint8Data){ 
        ret += ("0x"+("00"+val.toString(16)).substr(-2))+", ";
    }
    ret = ret.substring(0, ret.length-2) + "},";
    console.log(ret);
}

*/
#endif //CHARACTERS_H__
